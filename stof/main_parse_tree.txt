Program
  Class: main
    Function: STOF_INT main()
      Parameters:
      Body:
        - ExpressionStatementNode
          FunctionCall: print()
            Arguments:
              FunctionCall: isNumberOneGreaterThanNumberTwo()
                Arguments:
                  IntLiteral: 2
                  IntLiteral: 5
        - VariableDeclarationNode
          Type: STOF_INT
          Name: i
          Initializer:
            IntLiteral: 0
        - ExpressionStatementNode
          FunctionCall: print()
            Arguments:
              FunctionCall: incrementVariable()
                Arguments:
                  Variable: i
        - ReturnNode
          Value:
            IntLiteral: 0
    Function: STOF_BOOLEAN isNumberOneGreaterThanNumberTwo()
      Parameters:
        - STOF_INT numberOne
        - STOF_INT numberTwo
      Body:
        - IfNode
          Condition:
            BinaryOperator: >
              Left:
                Variable: numberOne
              Right:
                Variable: numberTwo
          Then:
            - ReturnNode
              Value:
                BooleanLiteral: true
          Else:
            - ReturnNode
              Value:
                BooleanLiteral: false
    Function: STOF_INT incrementVariable()
      Parameters:
        - STOF_INT i
      Body:
        - ForNode
          Init:
            Assignment: i
              Value:
                IntLiteral: 0
          Condition:
            BinaryOperator: <
              Left:
                Variable: i
              Right:
                IntLiteral: 10
          Increment:
            UnaryOperator: ++ (postfix)
              Variable: i
          Body:
            - ExpressionStatementNode
              UnaryOperator: ++ (postfix)
                Variable: i
        - ReturnNode
          Value:
            Variable: i
    Function: STOF_INT compareThreeNumbers()
      Parameters:
        - STOF_INT num1
        - STOF_INT num2
        - STOF_INT num3
      Body:
        - VariableDeclarationNode
          Type: STOF_INT
          Name: num
          Initializer:
            IntLiteral: 0
        - IfNode
          Condition:
            BinaryOperator: >
              Left:
                Variable: num1
              Right:
                Variable: num2
          Then:
            - ExpressionStatementNode
              Assignment: num
                Value:
                  Variable: num1
          Elif:
            BinaryOperator: <
              Left:
                Variable: num1
              Right:
                Variable: num2
            - ExpressionStatementNode
              Assignment: num
                Value:
                  Variable: num2
        - ReturnNode
          Value:
            Variable: num
